{
  "name": "express-validator",
  "description": "Express middleware for the validator module.",
  "author": {
    "name": "Christoph Tavan",
    "email": "dev@tavan.de"
  },
  "contributors": [
    {
      "name": "Chris O'Hara",
      "email": "cohara87@gmail.com"
    },
    {
      "name": "@orfaust"
    },
    {
      "name": "@zero21xxx"
    },
    {
      "name": "Roman Kalyakin",
      "email": "roman@kalyakin.com"
    }
  ],
  "version": "2.4.0",
  "homepage": "https://github.com/ctavan/express-validator",
  "repository": {
    "type": "git",
    "url": "git://github.com/ctavan/express-validator.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "dependencies": {
    "validator": "3.5.0"
  },
  "devDependencies": {
    "async": "~0.1.22",
    "express": "~2.5.11",
    "request": "~2.10.0"
  },
  "keywords": [
    "express",
    "validator",
    "validation",
    "validate",
    "sanitize",
    "sanitization",
    "xss"
  ],
  "readme": "# express-validator\n\n[![Build Status](https://secure.travis-ci.org/ctavan/express-validator.png)](http://travis-ci.org/ctavan/express-validator)\n\nAn [express.js]( https://github.com/visionmedia/express ) middleware for\n[node-validator]( https://github.com/chriso/validator.js ).\n\nThis is basically a copy of a [gist]( https://gist.github.com/752126 ) by\nnode-validator author [chriso]( https://github.com/chriso ).\n\n## Installation\n\n```\nnpm install express-validator\n```\n\n## Usage\n\n```javascript\nvar util = require('util'),\n    express = require('express'),\n    expressValidator = require('express-validator'),\n    app = express.createServer();\n\napp.use(express.bodyParser());\napp.use(expressValidator([options])); // this line must be immediately after express.bodyParser()!\n\napp.post('/:urlparam', function(req, res) {\n\n  // checkBody only checks req.body; none of the other req parameters\n  // Similarly checkParams only checks in req.params (URL params) and\n  // checkQuery only checks req.query (GET params).\n  req.checkBody('postparam', 'Invalid postparam').notEmpty().isInt();\n  req.checkParams('urlparam', 'Invalid urlparam').isAlpha();\n  req.checkQuery('getparam', 'Invalid getparam').isInt();\n\n  // OR assert can be used to check on all 3 types of params.\n  // req.assert('postparam', 'Invalid postparam').notEmpty().isInt();\n  // req.assert('urlparam', 'Invalid urlparam').isAlpha();\n  // req.assert('getparam', 'Invalid getparam').isInt();\n\n  req.sanitize('postparam').toBoolean();\n\n  var errors = req.validationErrors();\n  if (errors) {\n    res.send('There have been validation errors: ' + util.inspect(errors), 400);\n    return;\n  }\n  res.json({\n    urlparam: req.param('urlparam'),\n    getparam: req.param('getparam'),\n    postparam: req.param('postparam')\n  });\n});\n\napp.listen(8888);\n```\n\nWhich will result in:\n\n```\n$ curl -d 'postparam=1' http://localhost:8888/test?getparam=1\n{\"urlparam\":\"test\",\"getparam\":\"1\",\"postparam\":true}\n\n$ curl -d 'postparam=1' http://localhost:8888/t1est?getparam=1\nThere have been validation errors: [\n  { param: 'urlparam', msg: 'Invalid urlparam', value: 't1est' } ]\n\n$ curl -d 'postparam=1' http://localhost:8888/t1est?getparam=1ab\nThere have been validation errors: [\n  { param: 'getparam', msg: 'Invalid getparam', value: '1ab' },\n  { param: 'urlparam', msg: 'Invalid urlparam', value: 't1est' } ]\n\n$ curl http://localhost:8888/test?getparam=1&postparam=1\nThere have been validation errors: [\n  { param: 'postparam', msg: 'Invalid postparam', value: undefined} ]\n```\n\n### Middleware Options\n####`errorFormatter`\n_function(param,msg,value)_\n\nThe `errorFormatter` option can be used to specify a function that can be used to format the objects that populate the error array that is returned in `req.validationErrors()`. It should return an `Object` that has `param`, `msg`, and `value` keys defined.\n\n```javascript\n// In this example, the formParam value is going to get morphed into form body format useful for printing.\napp.use(expressValidator({\n  errorFormatter: function(param, msg, value) {\n      var namespace = param.split('.')\n      , root    = namespace.shift()\n      , formParam = root;\n\n    while(namespace.length) {\n      formParam += '[' + namespace.shift() + ']';\n    }\n    return {\n      param : formParam,\n      msg   : msg,\n      value : value\n    };\n  }\n}));\n```\n\n### Validation errors\n\nYou have two choices on how to get the validation errors:\n\n```javascript\nreq.assert('email', 'required').notEmpty();\nreq.assert('email', 'valid email required').isEmail();\nreq.assert('password', '6 to 20 characters required').len(6, 20);\n\nvar errors = req.validationErrors();\nvar mappedErrors = req.validationErrors(true);\n```\n\nerrors:\n\n```javascript\n[\n  {param: \"email\", msg: \"required\", value: \"<received input>\"},\n  {param: \"email\", msg: \"valid email required\", value: \"<received input>\"},\n  {param: \"password\", msg: \"6 to 20 characters required\", value: \"<received input>\"}\n]\n```\n\nmappedErrors:\n\n```javascript\n{\n  email: {\n    param: \"email\",\n    msg: \"valid email required\",\n    value: \"<received input>\"\n  },\n  password: {\n    param: \"password\",\n    msg: \"6 to 20 characters required\",\n    value: \"<received input>\"\n  }\n}\n```\n\n### Nested input data\n\nExample:\n\n```html\n<input name=\"user[fields][email]\" />\n```\n\nProvide an array instead of a string:\n\n```javascript\nreq.assert(['user', 'fields', 'email'], 'valid email required').isEmail();\nvar errors = req.validationErrors();\nconsole.log(errors);\n```\n\nOutput:\n\n```javascript\n[\n  {\n    param: \"user_fields_email\",\n    msg: \"valid email required\",\n    value: \"<received input>\"\n  }\n]\n```\n\nAlternatively you can use dot-notation to specify nested fields to be checked:\n\n```javascript\nreq.assert(['user.fields.email'], 'valid email required').isEmail();\n```\n\n### Regex routes\n\nExpress allows you to define regex routes like:\n\n```javascript\napp.get(/\\/test(\\d+)/, function() {});\n```\n\nYou can validate the extracted matches like this:\n\n```javascript\nreq.assert(0, 'Not a three-digit integer.').len(3, 3).isInt();\n```\n\n### Extending\n\nYou can add your own validators using `expressValidator.validator.extend(name, fn)`\n\n```javascript\nexpressValidator.validator.extend('isFinite', function (str) {\n    return isFinite(str);\n});\n```\n\n## Changelog\n\n### v0.4.1\n- Update this readme\n\n### v0.4.0\n- Added `req.checkBody()` (@zero21xxx).\n- Upgraded validator dependency to 1.1.3\n\n### v0.3.0\n- `req.validationErrors()` now returns `null` instead of `false` if there are no errors.\n\n### v0.2.4\n- Support for regex routes (@Cecchi)\n\n### v0.2.3\n- Fix checkHeader() (@pimguilherme)\n\n### v0.2.2\n- Add dot-notation for nested input (@sharonjl)\n- Add validate() alias for check()\n\n### v0.2.1\n- Fix chaining validators (@rapee)\n\n### v0.2.0\n- Added `validationErrors()` method (by @orfaust)\n- Added support for nested form fields (by @orfaust)\n- Added test cases\n\n### v0.1.3\n- Readme update\n\n### v0.1.2\n- Expose Filter and Validator instances to allow adding custom methods\n\n### v0.1.1\n- Use req.param() method to get parameter values instead of accessing\n  req.params directly.\n- Remove req.mixinParams() method.\n\n### v0.1.0\n- Initial release\n\n## Contributors\n\n- Christoph Tavan <dev@tavan.de> - Wrap the gist in an npm package\n- @orfaust - Add `validationErrors()` and nested field support\n- @zero21xxx - Added `checkBody` function\n\n## License\n\nCopyright (c) 2010 Chris O'Hara <cohara87@gmail.com>, MIT License\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ctavan/express-validator/issues"
  },
  "_id": "express-validator@2.4.0",
  "_shasum": "9f00d59e8f031b01dcb0ba3e70537f4c57ee96ae",
  "_from": "express-validator@latest",
  "_resolved": "https://registry.npmjs.org/express-validator/-/express-validator-2.4.0.tgz"
}
