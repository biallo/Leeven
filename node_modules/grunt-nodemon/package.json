{
  "name": "grunt-nodemon",
  "version": "0.0.8",
  "description": "Grunt task to run a nodemon monitor of your node.js server",
  "main": "test/server.js",
  "scripts": {
    "test": "grunt nodemon:exec & sleep 1s;kill -9 `pgrep node`; grunt nodemon:prod & sleep 1s; kill -9 `pgrep node`; grunt simplemocha:test1;grunt nodemon:exec & sleep 1s;kill -9 `pgrep node`;grunt simplemocha:test2;"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ChrisWren/grunt-nodemon.git"
  },
  "keywords": [
    "gruntplugin",
    "nodemon",
    "server"
  ],
  "author": {
    "name": "Chris Wren"
  },
  "license": "MIT",
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-simple-mocha": "~0.4.0",
    "should": "~1.2.2"
  },
  "dependencies": {
    "nodemon": "~0.7.8"
  },
  "readme": "# grunt-nodemon\n> Run [nodemon](https://github.com/remy/nodemon) as a grunt task for easy configuration and integration with the rest of your workflow\n\n[![NPM version](https://badge.fury.io/js/grunt-nodemon.png)](http://badge.fury.io/js/grunt-nodemon)  \n[![Dependency Status](https://gemnasium.com/ChrisWren/grunt-nodemon.png)](https://gemnasium.com/ChrisWren/grunt-nodemon)   \n[![Travis Status](https://travis-ci.org/ChrisWren/grunt-nodemon.png)](https://travis-ci.org/ChrisWren/grunt-nodemon)\n## Getting Started\nIf you haven't used grunt before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a gruntfile as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\n```shell\nnpm install grunt-nodemon --save-dev\n```\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-nodemon');\n```\n\n## Documentation\n\n### Usage\nThe minimal usage of nodemon runs with no options:\n```js\nnodemon: {\n  dev: {}\n}\n```\nWhen this is run, nodemon will look at the `package.json` file for the `main` property and run its value as a command in node.\n\nHere is a config that uses all of the available options for nodemon:\n\n```js\nnodemon: {\n  prod: {\n    options: {\n      file: 'test/server.js',\n      args: ['production'],\n      ignoredFiles: ['README.md', 'node_modules/**'],\n      watchedExtensions: ['js', 'coffee'],\n      watchedFolders: ['test', 'tasks'],\n      debug: true,\n      delayTime: 1,\n      env: {\n        PORT: '8181'\n      },\n      cwd: __dirname\n    }\n  },\n  exec: {\n    options: {\n      exec: 'less'\n    }\n  }\n}\n```\n#### Running nodemon concurrently\nA common use case is to run `nodemon` with other tasks concurrently. This can be achieved with the following config, which uses [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent) to run nodemon and [watch](https://github.com/gruntjs/grunt-contrib-watch) in a single terminal tab: \n```js\nconcurrent: {\n  target: {\n    tasks: ['nodemon', 'watch'],\n    options: {\n      logConcurrentOutput: true\n    }\n  }\n}\n```\n### Options\n\n#### file\nType: `String`\n\nFile that nodemon runs and restarts when changes are detected.\n\n### args\nType: `Array` of `Strings`\n\nList of arguments to be passed to your file.\n\n### ignoredFiles\nType: `Array` of `String globs`\n\nList of ignored files specified by a glob pattern. [Here](https://github.com/remy/nodemon#ignoring-files) is an explanation of how to use the patterns to ignore files. This task will create a `.nodemonignore` file in your repo based on these settings which nodemon reads when it starts.\n\n### watchedExtensions\nType: `Array` of `Strings`\n\nList of file extensions to watch for changes. By default, nodemon watches `.js`, `.coffee`, and `.litcoffee` files.\n\n### watchedFolders\nType: `Array` of `Strings` Default: `'.'`\n\nList of folders to watch for changes if you don't want to watch the root folder and its subdirectories.\n\n### debug\nType: `Boolean`\n\nOptionally launch the node.js debug server.\n\n### debugBreak\nType: `Boolean`\n\nOptionally launch the node.js debug server, automatically setting a breakpoint on the first line (using `--debug-brk`).\n\n### delayTime\nType: `Number`\n\nDelay the restart of nodemon by a number of seconds when compiling a large amount of files so that the app doesn't needlessly restart after each file.\n\n### cwd\nType: `String`\n\nThe current working directory to run your file from.\n\n### env\nType: `Object`\n\nHash of environment variables to pass to your file.\n\n### exec\nType: `String`\n\nYou can use nodemon to execute a command outside of node. Use this option to specify a command as a string with the argument being the file parameter above. You can read more on exec [here](https://github.com/remy/nodemon#running-non-node-scripts).\n\n# Changelog\n\n**0.0.8** - Added error logging for incorrectly installed `nodemon`.\n\n**0.0.7** - Added `debugBreak` option.\n\n**0.0.6** - Added `env` option.\n\n**0.0.5** - Added `cwd` option.\n\n**0.0.4** - Added `nodemon` as a proper dependency.\n\n**0.0.3** - Uses local version of `nodemon` for convenience and versioning.\n\n**0.0.2** - Removes `.nodemonignore` if it was previously generated and then the `ignoredFiles` option is removed.\n\n**0.0.1** - Added warning if `nodemon` isn't installed as a global module.\n\n**0.0.0** - Initial release\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ChrisWren/grunt-nodemon/issues"
  },
  "homepage": "https://github.com/ChrisWren/grunt-nodemon",
  "_id": "grunt-nodemon@0.0.8",
  "_shasum": "796152b8b87d91fecb2f5c011046fb1bafc17662",
  "_from": "grunt-nodemon@0.0.8",
  "_resolved": "https://registry.npmjs.org/grunt-nodemon/-/grunt-nodemon-0.0.8.tgz"
}
